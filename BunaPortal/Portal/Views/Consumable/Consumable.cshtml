@using BunaPortal;
@{
 ViewBag.Title = Localizer.Current.GetString("Consumable");
}

<div class="row">
<div class="col-md-12">
<div class="box box-primary">

<div id="viewModalConsumable" ></div>
	<div class="box-body">
		<div class="row">
			<div class="col-md-12">
				<div id="responseMessageConsumable" ></div>
			</div>
		</div>
		<div id="table" class="table-responsive">
            <table id="tblGridConsumable" class="table no-margin">
                <thead>
                    <tr>
                        <th>ConsumableID</th>
                        <th>@Localizer.Current.GetString("StpConsumableTypeID")</th>
                        <th>@Localizer.Current.GetString("StpUnitOfMeasureID")</th>
                        <th>@Localizer.Current.GetString("QuantityInUOM")</th>
                        <th>@Localizer.Current.GetString("UsedOnAssetID")</th>
                        <th>@Localizer.Current.GetString("AssetID")</th>
                        <th>@Localizer.Current.GetString("StpUOMForOpenAndCloseID")</th>
                        <th>@Localizer.Current.GetString("OpeningQuantity")</th>
                        <th>@Localizer.Current.GetString("ClosingQuantity")</th>
                        <th>@Localizer.Current.GetString("Reason")</th>
                        <th>@Localizer.Current.GetString("IsPurchase")</th>
                        <th>@Localizer.Current.GetString("CreateDateTime")</th>
                        @*<th>@Localizer.Current.GetString("Purchase Price")</th>
         <th>@Localizer.Current.GetString("Purchase Tax")</th>
         <th>@Localizer.Current.GetString("Purchase Costs")</th>
         <th>@Localizer.Current.GetString("Purchase Date")</th>

         <th>@Localizer.Current.GetString("Is Claimable")</th>
         <th>@Localizer.Current.GetString("Supplier")</th>
        <th>@Localizer.Current.GetString("Created By")</th>
                        *@
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                </tfoot>
            </table>
		</div>
	</div>
</div>
</div>
	@section Header{
	<h1>
	@Localizer.Current.GetString("Consumable")
	</h1>
	<ol class="breadcrumb">
	<li><a href = "/" ><i class="fa fa-home"></i>@Localizer.Current.GetString("Home")</a></li>
	<li><a href = "#" class="active">@Localizer.Current.GetString("Consumable")</a></li>
	</ol>
}

@section scripts
{

    <script type="text/javascript">

		$(document).ready(function () {

			//Filter drop down data
			var filterList1 = [];
			$.ajax({
				type: 'POST',
				url: '@Url.Action("PrePopulateInput", "Base")',
				data: {
					field: 'StpDataID as ID,DataDescription as Description',
					table: 'StpData',
					where: ' StpDataTypeID = 26',
					orderby: 'DataDescription',
				},
				dataType: 'json',
				async: false,
				success: function (data) {

					for (var i = 0; i < data.result.length; i++) {
						filterList1.push(
							{
								"value": data.result[i].id,
								"label": data.result[i].Description
							}
						)
					}
				}
				,
				error: function (data) {

					alert('Error populating filter ' + JSON.stringify(data));
				}
			});

			var filterList2 = [];
			$.ajax({
				type: 'POST',
				url: '@Url.Action("PrePopulateInput", "Base")',
				data: {
					field: 'StpDataID as ID,DataDescription as Description',
					table: 'StpData',
					where: ' StpDataTypeID = 24',
					orderby: 'DataDescription',
				},
				dataType: 'json',
				async: false,
				success: function (data) {

					for (var i = 0; i < data.result.length; i++) {
						filterList2.push(
							{
								"value": data.result[i].id,
								"label": data.result[i].Description
							}
						)
					}
				}
				,
				error: function (data) {

					alert('Error populating filter ' + JSON.stringify(data));
				}
			});

			var filterList3 = [];
			$.ajax({
				type: 'POST',
				url: '@Url.Action("PrePopulateInput", "Base")',
				data: {
					field: 'AssetID as ID,Name as Description',
					table: 'Asset',
					where: 'IsActive = 1',
					orderby: 'Name',
				},
				dataType: 'json',
				async: false,
				success: function (data) {

					for (var i = 0; i < data.result.length; i++) {
						filterList3.push(
							{
								"value": data.result[i].id,
								"label": data.result[i].Description
							}
						)
					}
				},
				error: function (data) {

					alert('Error populating filter ' + JSON.stringify(data));
				}
			});

			var filterList4 = [];
			$.ajax({
				type: 'POST',
				url: '@Url.Action("PrePopulateInput", "Base")',
				data: {
					field: 'AssetID as ID,Name as Description',
					table: 'Asset',
					where: 'IsActive = 1',
					orderby: 'Name',
				},
				dataType: 'json',
				async: false,
				success: function (data) {

					for (var i = 0; i < data.result.length; i++) {
						filterList4.push(
							{
								"value": data.result[i].id,
								"label": data.result[i].Description
							}
						)
					}
				},
				error: function (data) {

					alert('Error populating filter ' + JSON.stringify(data));
				}
			});

			var filterList5 = [];
			$.ajax({
				type: 'POST',
				url: '@Url.Action("PrePopulateInput", "Base")',
				data: {
					field: 'StpDataID as ID,DataDescription as Description',
					table: 'StpData',
					where: ' StpDataTypeID = 24',
					orderby: 'DataDescription',
				},
				dataType: 'json',
				async: false,
				success: function (data) {

					for (var i = 0; i < data.result.length; i++) {
						filterList5.push(
							{
								"value": data.result[i].id,
								"label": data.result[i].Description
							}
						)
					}
				}
				,
				error: function (data) {

					alert('Error populating filter ' + JSON.stringify(data));
				}
			});



			$('#responseMessageConsumable').html("");

			var datatableConsumable = $('#tblGridConsumable').dataTable({
				"bServerSide": true,
				"bAutoWidth": true,
				"sAjaxSource": '@Url.Action("GetConsumableList", "Consumable")',
				"fnServerData": function (sSource, aoData, fnCallback) {
					$('#responseMessageConsumable').html("");
					$.ajax({
						"dataType": 'json',
						"contentType": "application/json; charset = utf-8",
						"type": "GET",
						"url": sSource,
						"data": aoData,
						"success": fnCallback,
						"error": function (xhr, textStatus, error) {
							$('#responseMessageConsumable').html(xhr.responseText);
						}
					});
				},
				"bProcessing": true,
				"dom": 'T<"clear"><Blp>rtip',
				"lengthMenu": [[10, 100, 500, 1000, -1], [10, 100, 500, 1000, "All"]],
				"aoColumns": [
					{ "mDataProp": "ConsumableID" },
					{ "mDataProp": "StpConsumableTypeID" },
					{ "mDataProp": "StpUnitOfMeasureID" },
					{ "mDataProp": "QuantityInUOM" },
					{ "mDataProp": "UsedOnAssetID" },
					{ "mDataProp": "AssetID" },
					{ "mDataProp": "StpUOMForOpenAndCloseID" },
					{ "mDataProp": "OpeningQuantity" },
					{ "mDataProp": "ClosingQuantity" },
					{ "mDataProp": "Reason" },
					{ "mDataProp": "IsPurchase" },
					{ "mDataProp": "CreateDateTime" },
					//{ "mDataProp": "PurchasePrice" },
					//{ "mDataProp": "PurchaseTax" },
					//{ "mDataProp": "PurchaseCosts" },
					//{ "mDataProp": "PurchaseDate" },

					//{ "mDataProp": "IsClaimable" },
					//{ "mDataProp": "Supplier" },
					{ "mDataProp": "EditButton" },
					{ "mDataProp": "DeleteButton" },
					{ "mDataProp": "ConsumableTypeDesc" },
					{ "mDataProp": "UnitOfMeasureDesc" },
					{ "mDataProp": "UsedOnAssetDesc" },
					{ "mDataProp": "AssetDesc" },
					{ "mDataProp": "UOMForOpenAndCloseDesc" },
				],
				"columnDefs": [{ visible: false, targets: [0, 14, 15, 16, 17, 18] }, { orderable: false, targets: [11, 12] }, { "render": function (data, type, row) { if (data == null) { return ""; } else { var date = new Date(parseInt(data.substr(6))); return formatDate(date.toDateString()); } }, "targets": [11] }, { "render": function (data, type, row) { return row.ConsumableTypeDesc; }, "targets": [1] }, { "render": function (data, type, row) { return row.UnitOfMeasureDesc; }, "targets": [2] }, { "render": function (data, type, row) { return row.UsedOnAssetDesc; }, "targets": [4] }, { "render": function (data, type, row) { return row.AssetDesc; }, "targets": [5] }, { "render": function (data, type, row) { return row.UOMForOpenAndCloseDesc; }, "targets": [6] }],
				"buttons": [
					{
						text: '<i class="fa fa-plus" aria-hidden="true"></i>',
						action: function (e, dt, node, config) {
							$('#progressIcon').show();
							
							$.ajax({
								type: 'POST',
								url: '@Url.Action("GetConsumable", "Consumable")',
								data: { id: '', type: @ViewBag.Type},
								dataType: "text",
								success: function (result) {
									if (result) {
										$('#viewModalConsumable').html(result);
									}
									else {
										ShowNotification(false, data.errorMessage)
									}
									$('#progressIcon').hide();
								}
							});
						},
						titleAttr: '@Localizer.Current.GetString("Add")'
					},
					{
						text: '<i class="fa fa-file-excel-o"></i>',
						action: function (e, dt, node, config) {
							$.ajax({
								type: 'POST',
								url: '@Url.Action("ExportForm", "Consumable")',
								data: { dataList: JSON.stringify(dt.ajax.params()) },
								success: function (result) {
									if (result) {
										$('#viewModalConsumable').html(result);
									}
									else {
										ShowNotification(false, data.errorMessage)
									}
								}
							});
						},
						titleAttr: '@Localizer.Current.GetString("Export")'
					},
					{
						extend: 'copyHtml5',
						text: '<i class="fa fa-files-o"></i>',
						titleAttr: 'Copy'
					},
					{
						extend: 'print',
						text: '<i class="fa fa-print" aria-hidden="true"></i>',
						titleAttr: '@Localizer.Current.GetString("Print")',
						customize: function (win) {
							$(win.document.body)
								.css('font-size', '10pt')
								.prepend(
									'<img src="http://datatables.net/media/images/logo-fade.png" style="position:absolute; top:0; left:0;" />'
								);
							$(win.document.body).find('table')
								.addClass('compact')
								.css('font-size', 'inherit');
						}
					}
				],

				"footerCallback": function (row, data, start, end, display) {
					var api = this.api(), data;

					// Remove the formatting to get integer data for summation
					//var intVal = function (i) {
					//    return typeof i === 'string' ?
					//        i.replace(/[\$,]/g, '') * 1 :
					//        typeof i === 'number' ?
					//            i : 0;
					//};

					// Total over all pages
					total = api
						.column(3)
						.data()
						.reduce(function (a, b) {
							return a + b;
						}, 0);

					// Total over this page
					pageTotal = api
						.column(3, { page: 'current' })
						.data()
						.reduce(function (a, b) {
							return a + b;
						}, 0);

					// Update footer
					$(api.column(3).footer()).html(
						pageTotal + ' ( ' + total + ' total)'
					);
				},
				"language": {
					"lengthMenu": "  " + display.value + " _MENU_ " + records.value,
					"zeroRecords": zeroRecords.value,
					"info": showing.value + " _PAGE_ " + " of _PAGES_ from _TOTAL_ entries",
					"infoEmpty": infoEmpty.value,
					"infoFiltered": "(" + filtered.value + " _MAX_ " + totalrecords.value + ")",
					"loadingRecords": loadingRecords.value,
					"processing": '<div class="loader"> <i class="fa fa-spinner fa-spin fa-3x fa-fw"></i></div> ',
					"paginate": {
						"first": first.value,
						"last": last.value,
						"next": next.vaue,
						"previous": previous.value
					},
				}
			}).yadcf([
				{
					column_number: 1,
					filter_type: "select",
					data: filterList1,
					filter_delay: 500
				},
				{
					column_number: 2,
					filter_type: "select",
					data: filterList2,
					filter_delay: 500
				},
				{
					column_number: 3,
					filter_type: "text",
					filter_delay: 500
				},
				{
					column_number: 4,
					filter_type: "select",
					data: filterList3,
					filter_delay: 500

				},
				{
					column_number: 5,
					filter_type: "select",
					data: filterList4,
					filter_delay: 500

				},
				{
					column_number: 6,
					filter_type: "select",
					data: filterList5,
					filter_delay: 500
				},
				{
					column_number: 7,
					filter_type: "text",
					filter_delay: 500
				},
				{
					column_number: 8,
					filter_type: "text",
					filter_delay: 500
				},
				{
					column_number: 9,
					filter_type: "text",
					filter_delay: 500
				},
				{
					column_number: 10,
					filter_type: "select",
					data: ["True", "False"]
				},
				{
					column_number: 11,
					filter_type: "range_date",
					date_format: "yyyy-mm-dd",
					filter_delay: 500
				},


			], { cumulative_filtering: true });

			//Filter by Diesel
			if (@ViewBag.Type > 0)
			{
			yadcf.exFilterColumn(datatableConsumable, [[1, @ViewBag.Type]], true);
			}

			//var column = $('#tblGridConsumable').DataTable().column(3);

            //var sum = column
            //    .data()
            //    .reduce(function (a, b) {
            //        a = parseInt(a, 10);
            //        if (isNaN(a)) { a = 0; }

            //        b = parseInt(b, 10);
            //        if (isNaN(b)) { b = 0; }

            //        return a + b;
            //    });

            //$(column.footer()).html('Sum: ');



		$('#tblGridConsumable').on('click', '.btnEdit', function(e)
		{
			e.preventDefault();
			$('#progressIcon').show();
			var value = $(this).attr("data-id");
			$.ajax({
				type: 'POST',
				url: '@Url.Action("GetConsumable", "Consumable")',
				data: { id: value },
				dataType: "text",
				success: function(result)
				{
				$('#progressIcon').hide();
				if (result)
				{
				$('#viewModalConsumable').html(result);
				}
				else
				{
					ShowNotification(false, data.errorMessage)
				}
			}
			});
		});

		$('#tblGridConsumable').on('dblclick', 'tr', function(e)
		{
			e.preventDefault();
			$('#progressIcon').show();
			var value = $('#tblGridConsumable').DataTable().row(this).data()["ConsumableID"];
			$.ajax({
				type: 'POST',
				url: '@Url.Action("GetConsumable", "Consumable")',
				data: { id: value },
				dataType: "text",
				success: function(result)
				{
				$('#progressIcon').hide();
				if (result)
				{
				$('#viewModalConsumable').html(result);
				}
				else
				{
					ShowNotification(false, data.errorMessage)
				}
			}
			});
		});

		$('#tblGridConsumable').on('click', '.btnDelete', function(e)
		{
			if (confirm('Are you sure you want to delete'))
			{
			e.preventDefault();
			$('#progressIcon').show();
			var value = $(this).attr("data-id");
			$.ajax({
				type: 'POST',
				url: '@Url.Action("DeleteConsumable", "Consumable")',
				data: { id: value },
				dataType: "text",
				success: function(result) {
				$('#progressIcon').hide();
				$('#viewModalConsumable').html(result);
				$('#tblGridConsumable').DataTable().ajax.reload();
				},
			 });
			 }
		 });

		$('a.toggle-vis').on('click', function(e)
		{
			e.preventDefault();
			var column = $('#tblGridConsumable').DataTable().column($('#tblGridConsumable').attr('data-column'));
			column.visible(!column.visible());
		 });



		 });

    </script>
	}
